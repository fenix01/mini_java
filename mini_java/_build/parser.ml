type token =
  | INTEGER of (Int32.t)
  | STRING of (string)
  | BOOL of (bool)
  | IDENT of (string)
  | BOOLEAN
  | CLASS
  | ELSE
  | EXTENDS
  | FOR
  | IF
  | INSTANCEOF
  | INT
  | NEW
  | NULL
  | PUBLIC
  | RETURN
  | STATIC
  | THIS
  | VOID
  | EQ
  | EQEQ
  | NEQ
  | LT
  | GT
  | LEQ
  | GEQ
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | PLUSPLUS
  | MINUSMINUS
  | NOT
  | DOT
  | OR
  | AND
  | BANG
  | LP
  | RP
  | LB
  | RB
  | EOF
  | COMMA
  | SEMICOLON
  | LSB
  | RSB

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Ast
  let current_pos () =
    Parsing.symbol_start_pos (),
    Parsing.symbol_end_pos ()

  let loc x = { node = x; info = current_pos () }

# 61 "parser.ml"
let yytransl_const = [|
  261 (* BOOLEAN *);
  262 (* CLASS *);
  263 (* ELSE *);
  264 (* EXTENDS *);
  265 (* FOR *);
  266 (* IF *);
  267 (* INSTANCEOF *);
  268 (* INT *);
  269 (* NEW *);
  270 (* NULL *);
  271 (* PUBLIC *);
  272 (* RETURN *);
  273 (* STATIC *);
  274 (* THIS *);
  275 (* VOID *);
  276 (* EQ *);
  277 (* EQEQ *);
  278 (* NEQ *);
  279 (* LT *);
  280 (* GT *);
  281 (* LEQ *);
  282 (* GEQ *);
  283 (* PLUS *);
  284 (* MINUS *);
  285 (* TIMES *);
  286 (* DIV *);
  287 (* MOD *);
  288 (* PLUSPLUS *);
  289 (* MINUSMINUS *);
  290 (* NOT *);
  291 (* DOT *);
  292 (* OR *);
  293 (* AND *);
  294 (* BANG *);
  295 (* LP *);
  296 (* RP *);
  297 (* LB *);
  298 (* RB *);
    0 (* EOF *);
  299 (* COMMA *);
  300 (* SEMICOLON *);
  301 (* LSB *);
  302 (* RSB *);
    0|]

let yytransl_block = [|
  257 (* INTEGER *);
  258 (* STRING *);
  259 (* BOOL *);
  260 (* IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\002\000\005\000\005\000\006\000\008\000\008\000\
\009\000\010\000\010\000\012\000\012\000\012\000\011\000\011\000\
\011\000\011\000\004\000\013\000\013\000\015\000\015\000\014\000\
\007\000\016\000\016\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\019\000\019\000\020\000\020\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\021\000\021\000\022\000\022\000\023\000\023\000\000\000"

let yylen = "\002\000\
\003\000\016\000\001\000\001\000\002\000\006\000\000\000\002\000\
\001\000\000\000\002\000\001\000\001\000\001\000\003\000\005\000\
\006\000\006\000\003\000\000\000\001\000\002\000\004\000\001\000\
\001\000\000\000\002\000\001\000\002\000\004\000\005\000\007\000\
\009\000\001\000\003\000\000\000\002\000\000\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\001\000\003\000\004\000\
\005\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\004\000\004\000\004\000\003\000\
\001\000\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\079\000\000\000\000\000\004\000\025\000\
\000\000\000\000\000\000\005\000\000\000\000\000\000\000\001\000\
\008\000\010\000\000\000\000\000\000\000\000\000\006\000\000\000\
\013\000\012\000\000\000\000\000\011\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\
\000\000\015\000\000\000\000\000\022\000\000\000\000\000\000\000\
\000\000\000\000\026\000\016\000\000\000\000\000\000\000\018\000\
\000\000\000\000\023\000\017\000\000\000\019\000\040\000\041\000\
\042\000\000\000\000\000\000\000\044\000\000\000\043\000\000\000\
\000\000\000\000\000\000\000\000\028\000\034\000\073\000\000\000\
\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\052\000\053\000\000\000\
\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\000\
\000\000\035\000\000\000\000\000\000\000\000\000\000\000\072\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\074\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\030\000\048\000\000\000\000\000\000\000\000\000\
\049\000\000\000\000\000\000\000\000\000\002\000\000\000\032\000\
\000\000\033\000"

let yydgoto = "\002\000\
\004\000\005\000\011\000\078\000\006\000\007\000\079\000\014\000\
\020\000\021\000\029\000\080\000\039\000\057\000\040\000\058\000\
\081\000\082\000\127\000\089\000\083\000\145\000\146\000"

let yysindex = "\004\000\
\001\255\000\000\010\255\000\000\016\255\001\255\000\000\000\000\
\029\255\033\255\045\000\000\000\010\255\023\255\084\255\000\000\
\000\000\000\000\049\255\059\255\005\255\032\255\000\000\000\000\
\000\000\000\000\010\255\080\255\000\000\010\255\085\255\087\255\
\008\255\244\254\105\255\008\255\000\000\010\255\089\255\088\255\
\008\255\000\000\126\255\098\255\000\000\094\255\008\255\106\255\
\108\255\094\255\000\000\000\000\010\255\094\255\141\255\000\000\
\114\255\139\255\000\000\000\000\146\255\000\000\000\000\000\000\
\000\000\120\255\121\255\010\255\000\000\230\255\000\000\230\255\
\230\255\230\255\230\255\208\255\000\000\000\000\000\000\010\255\
\000\000\069\000\238\254\124\255\230\255\230\255\134\255\014\002\
\130\255\131\255\131\255\131\255\131\255\125\255\136\255\224\001\
\150\255\008\255\230\255\230\255\230\255\230\255\230\255\230\255\
\230\255\230\255\230\255\230\255\230\255\000\000\000\000\010\255\
\230\255\230\255\000\000\230\255\230\255\133\255\137\255\247\001\
\230\255\000\000\230\255\230\255\252\255\230\255\138\255\000\000\
\248\255\248\255\030\255\030\255\030\255\030\255\079\000\079\000\
\131\255\131\255\131\255\000\000\037\002\060\002\014\002\014\002\
\158\255\159\255\165\255\230\255\139\255\166\255\131\255\131\255\
\131\255\014\002\000\000\000\000\230\255\094\255\160\255\200\255\
\000\000\014\002\172\255\230\255\139\255\000\000\175\255\000\000\
\139\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\201\255\000\000\000\000\
\176\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\177\255\000\000\000\000\164\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\178\255\000\000\000\000\178\255\000\000\000\000\000\000\183\255\
\178\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\182\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\181\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\000\000\181\255\000\000\000\000\006\255\
\000\000\096\000\120\000\144\000\168\000\000\000\000\000\000\000\
\184\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\189\255\000\000\000\000\000\000\
\189\255\000\000\000\000\000\000\042\000\000\000\000\000\000\000\
\012\255\075\002\128\001\152\001\176\001\200\001\080\001\104\001\
\192\000\216\000\240\000\000\000\118\255\078\255\043\255\063\255\
\000\000\190\255\000\000\181\255\000\000\000\000\008\001\032\001\
\056\001\191\255\000\000\000\000\000\000\000\000\000\000\095\255\
\000\000\077\255\000\000\197\255\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\210\255\000\000\221\000\254\255\000\000\
\000\000\000\000\000\000\238\255\250\255\000\000\000\000\000\000\
\113\255\224\255\000\000\187\255\000\000\117\000\000\000"

let yytablesize = 887
let yytable = "\052\000\
\009\000\116\000\030\000\056\000\001\000\160\000\003\000\060\000\
\024\000\025\000\017\000\037\000\025\000\008\000\038\000\119\000\
\026\000\038\000\028\000\026\000\117\000\168\000\038\000\027\000\
\032\000\170\000\041\000\034\000\053\000\044\000\010\000\042\000\
\063\000\063\000\048\000\045\000\013\000\088\000\015\000\090\000\
\091\000\092\000\093\000\096\000\016\000\039\000\031\000\063\000\
\063\000\039\000\059\000\063\000\088\000\120\000\063\000\063\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\018\000\
\112\000\087\000\129\000\130\000\131\000\132\000\133\000\134\000\
\135\000\136\000\137\000\138\000\139\000\097\000\159\000\128\000\
\141\000\142\000\047\000\143\000\144\000\047\000\047\000\019\000\
\144\000\022\000\151\000\152\000\153\000\154\000\167\000\031\000\
\031\000\031\000\031\000\031\000\023\000\035\000\077\000\031\000\
\031\000\077\000\031\000\031\000\031\000\140\000\031\000\163\000\
\031\000\062\000\062\000\088\000\078\000\062\000\033\000\078\000\
\062\000\062\000\031\000\043\000\162\000\036\000\031\000\031\000\
\046\000\049\000\047\000\088\000\031\000\031\000\051\000\031\000\
\031\000\050\000\031\000\063\000\064\000\065\000\024\000\025\000\
\061\000\054\000\055\000\066\000\067\000\084\000\026\000\068\000\
\069\000\061\000\070\000\062\000\071\000\061\000\085\000\086\000\
\061\000\061\000\110\000\111\000\123\000\112\000\072\000\014\000\
\118\000\126\000\073\000\074\000\121\000\122\000\025\000\124\000\
\075\000\076\000\147\000\051\000\148\000\155\000\077\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\156\000\025\000\025\000\
\025\000\157\000\025\000\164\000\158\000\161\000\165\000\025\000\
\063\000\064\000\065\000\008\000\094\000\166\000\169\000\003\000\
\007\000\020\000\009\000\095\000\068\000\069\000\021\000\024\000\
\038\000\071\000\012\000\036\000\075\000\076\000\063\000\064\000\
\065\000\008\000\037\000\072\000\038\000\150\000\000\000\073\000\
\074\000\000\000\068\000\069\000\000\000\075\000\076\000\071\000\
\000\000\000\000\000\000\000\000\063\000\064\000\065\000\008\000\
\000\000\072\000\098\000\000\000\000\000\073\000\074\000\000\000\
\068\000\069\000\000\000\075\000\076\000\071\000\101\000\102\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\110\000\
\111\000\046\000\112\000\000\000\000\000\000\000\000\000\000\000\
\000\000\075\000\076\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\000\000\046\000\046\000\046\000\045\000\000\000\046\000\000\000\
\000\000\046\000\046\000\000\000\000\000\000\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\000\000\045\000\045\000\045\000\098\000\
\000\000\045\000\000\000\000\000\045\000\045\000\000\000\000\000\
\000\000\099\000\100\000\101\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\110\000\111\000\000\000\112\000\
\113\000\114\000\055\000\107\000\108\000\109\000\110\000\111\000\
\115\000\112\000\000\000\000\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\000\000\
\000\000\000\000\050\000\055\000\055\000\000\000\000\000\055\000\
\000\000\000\000\055\000\055\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\000\000\
\000\000\000\000\051\000\050\000\050\000\000\000\000\000\050\000\
\000\000\000\000\050\000\050\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\000\000\
\000\000\000\000\054\000\051\000\051\000\000\000\000\000\051\000\
\000\000\000\000\051\000\051\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\000\000\
\000\000\000\000\058\000\054\000\054\000\000\000\000\000\054\000\
\000\000\000\000\054\000\054\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\000\000\
\000\000\000\000\059\000\058\000\058\000\000\000\000\000\058\000\
\000\000\000\000\058\000\058\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\000\000\
\000\000\000\000\060\000\059\000\059\000\000\000\000\000\059\000\
\000\000\000\000\059\000\059\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\000\000\
\000\000\000\000\070\000\060\000\060\000\000\000\000\000\060\000\
\000\000\000\000\060\000\060\000\070\000\070\000\070\000\070\000\
\070\000\070\000\070\000\070\000\070\000\070\000\070\000\000\000\
\000\000\000\000\069\000\070\000\070\000\000\000\000\000\070\000\
\000\000\000\000\070\000\070\000\069\000\069\000\069\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\000\000\
\000\000\000\000\071\000\069\000\069\000\000\000\000\000\069\000\
\000\000\000\000\069\000\069\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\071\000\071\000\071\000\000\000\
\000\000\000\000\056\000\071\000\071\000\000\000\000\000\071\000\
\000\000\000\000\071\000\071\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\000\000\000\000\000\000\000\000\
\000\000\000\000\057\000\056\000\056\000\000\000\000\000\056\000\
\000\000\000\000\056\000\056\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\000\000\000\000\000\000\000\000\
\000\000\000\000\065\000\057\000\057\000\000\000\000\000\057\000\
\000\000\000\000\057\000\057\000\065\000\065\000\065\000\065\000\
\065\000\065\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\067\000\065\000\065\000\000\000\000\000\065\000\
\000\000\000\000\065\000\065\000\067\000\067\000\067\000\067\000\
\067\000\067\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\066\000\067\000\067\000\000\000\000\000\067\000\
\000\000\000\000\067\000\067\000\066\000\066\000\066\000\066\000\
\066\000\066\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\068\000\066\000\066\000\000\000\000\000\066\000\
\000\000\000\000\066\000\066\000\068\000\068\000\068\000\068\000\
\068\000\068\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\098\000\068\000\068\000\000\000\000\000\068\000\
\000\000\000\000\068\000\068\000\099\000\100\000\101\000\102\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\110\000\
\111\000\098\000\112\000\113\000\114\000\000\000\000\000\125\000\
\000\000\000\000\000\000\099\000\100\000\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\108\000\109\000\110\000\111\000\
\098\000\112\000\113\000\114\000\000\000\000\000\149\000\000\000\
\000\000\000\000\099\000\100\000\101\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\098\000\
\112\000\113\000\114\000\000\000\000\000\000\000\000\000\000\000\
\000\000\099\000\100\000\101\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\110\000\111\000\098\000\112\000\
\000\000\114\000\000\000\000\000\000\000\000\000\000\000\000\000\
\099\000\100\000\101\000\102\000\103\000\104\000\105\000\106\000\
\107\000\108\000\109\000\110\000\111\000\000\000\112\000\064\000\
\064\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\064\000\064\000\
\000\000\000\000\064\000\000\000\000\000\064\000\064\000"

let yycheck = "\046\000\
\003\000\020\001\021\000\050\000\001\000\149\000\006\001\054\000\
\004\001\005\001\013\000\004\001\005\001\004\001\033\000\085\000\
\012\001\036\000\021\000\012\001\039\001\165\000\041\000\019\001\
\027\000\169\000\039\001\030\000\047\000\036\000\015\001\044\001\
\021\001\022\001\041\000\038\000\008\001\070\000\006\001\072\000\
\073\000\074\000\075\000\076\000\000\000\040\001\015\001\036\001\
\037\001\044\001\053\000\040\001\085\000\086\000\043\001\044\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\041\001\
\035\001\068\000\099\000\100\000\101\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\080\000\148\000\098\000\
\113\000\114\000\040\001\116\000\117\000\043\001\044\001\004\001\
\121\000\041\001\123\000\124\000\125\000\126\000\164\000\001\001\
\002\001\003\001\004\001\005\001\042\001\017\001\040\001\009\001\
\010\001\043\001\012\001\013\001\014\001\112\000\016\001\158\000\
\018\001\036\001\037\001\148\000\040\001\040\001\039\001\043\001\
\043\001\044\001\028\001\019\001\157\000\039\001\032\001\033\001\
\040\001\004\001\043\001\164\000\038\001\039\001\041\001\041\001\
\042\001\040\001\044\001\001\001\002\001\003\001\004\001\005\001\
\004\001\040\001\039\001\009\001\010\001\004\001\012\001\013\001\
\014\001\036\001\016\001\042\001\018\001\040\001\039\001\039\001\
\043\001\044\001\032\001\033\001\040\001\035\001\028\001\004\001\
\045\001\020\001\032\001\033\001\039\001\044\001\011\001\040\001\
\038\001\039\001\046\001\041\001\044\001\044\001\044\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\040\001\035\001\036\001\
\037\001\043\001\039\001\044\001\040\001\040\001\007\001\044\001\
\001\001\002\001\003\001\004\001\005\001\042\001\040\001\015\001\
\041\001\040\001\042\001\012\001\013\001\014\001\040\001\042\001\
\044\001\018\001\006\000\044\001\040\001\040\001\001\001\002\001\
\003\001\004\001\044\001\028\001\040\001\121\000\255\255\032\001\
\033\001\255\255\013\001\014\001\255\255\038\001\039\001\018\001\
\255\255\255\255\255\255\255\255\001\001\002\001\003\001\004\001\
\255\255\028\001\011\001\255\255\255\255\032\001\033\001\255\255\
\013\001\014\001\255\255\038\001\039\001\018\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\011\001\035\001\255\255\255\255\255\255\255\255\255\255\
\255\255\038\001\039\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\035\001\036\001\037\001\011\001\255\255\040\001\255\255\
\255\255\043\001\044\001\255\255\255\255\255\255\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\255\255\035\001\036\001\037\001\011\001\
\255\255\040\001\255\255\255\255\043\001\044\001\255\255\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\255\255\035\001\
\036\001\037\001\011\001\029\001\030\001\031\001\032\001\033\001\
\044\001\035\001\255\255\255\255\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\255\255\255\255\011\001\036\001\037\001\255\255\255\255\040\001\
\255\255\255\255\043\001\044\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\255\255\255\255\011\001\036\001\037\001\255\255\255\255\040\001\
\255\255\255\255\043\001\044\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\255\255\255\255\011\001\036\001\037\001\255\255\255\255\040\001\
\255\255\255\255\043\001\044\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\255\255\255\255\011\001\036\001\037\001\255\255\255\255\040\001\
\255\255\255\255\043\001\044\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\255\255\255\255\011\001\036\001\037\001\255\255\255\255\040\001\
\255\255\255\255\043\001\044\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\255\255\255\255\011\001\036\001\037\001\255\255\255\255\040\001\
\255\255\255\255\043\001\044\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\255\255\255\255\011\001\036\001\037\001\255\255\255\255\040\001\
\255\255\255\255\043\001\044\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\255\255\255\255\011\001\036\001\037\001\255\255\255\255\040\001\
\255\255\255\255\043\001\044\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\255\255\255\255\011\001\036\001\037\001\255\255\255\255\040\001\
\255\255\255\255\043\001\044\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\255\255\255\255\011\001\036\001\037\001\255\255\255\255\040\001\
\255\255\255\255\043\001\044\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\255\255\255\255\255\255\
\255\255\255\255\011\001\036\001\037\001\255\255\255\255\040\001\
\255\255\255\255\043\001\044\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\255\255\255\255\255\255\
\255\255\255\255\011\001\036\001\037\001\255\255\255\255\040\001\
\255\255\255\255\043\001\044\001\021\001\022\001\023\001\024\001\
\025\001\026\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\011\001\036\001\037\001\255\255\255\255\040\001\
\255\255\255\255\043\001\044\001\021\001\022\001\023\001\024\001\
\025\001\026\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\011\001\036\001\037\001\255\255\255\255\040\001\
\255\255\255\255\043\001\044\001\021\001\022\001\023\001\024\001\
\025\001\026\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\011\001\036\001\037\001\255\255\255\255\040\001\
\255\255\255\255\043\001\044\001\021\001\022\001\023\001\024\001\
\025\001\026\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\011\001\036\001\037\001\255\255\255\255\040\001\
\255\255\255\255\043\001\044\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\011\001\035\001\036\001\037\001\255\255\255\255\040\001\
\255\255\255\255\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\011\001\035\001\036\001\037\001\255\255\255\255\040\001\255\255\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\011\001\
\035\001\036\001\037\001\255\255\255\255\255\255\255\255\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\011\001\035\001\
\255\255\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\255\255\035\001\021\001\
\022\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\036\001\037\001\
\255\255\255\255\040\001\255\255\255\255\043\001\044\001"

let yynames_const = "\
  BOOLEAN\000\
  CLASS\000\
  ELSE\000\
  EXTENDS\000\
  FOR\000\
  IF\000\
  INSTANCEOF\000\
  INT\000\
  NEW\000\
  NULL\000\
  PUBLIC\000\
  RETURN\000\
  STATIC\000\
  THIS\000\
  VOID\000\
  EQ\000\
  EQEQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  LEQ\000\
  GEQ\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  MOD\000\
  PLUSPLUS\000\
  MINUSMINUS\000\
  NOT\000\
  DOT\000\
  OR\000\
  AND\000\
  BANG\000\
  LP\000\
  RP\000\
  LB\000\
  RB\000\
  EOF\000\
  COMMA\000\
  SEMICOLON\000\
  LSB\000\
  RSB\000\
  "

let yynames_block = "\
  INTEGER\000\
  STRING\000\
  BOOL\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'class_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'main_class) in
    Obj.repr(
# 46 "parser.mly"
                            ( let main, instr = _2 in
                              _1, main, instr )
# 510 "parser.ml"
               : Ast.parsed_prog))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 13 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _10 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _11 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _15 = (Parsing.peek_val __caml_parser_env 1 : 'block) in
    Obj.repr(
# 53 "parser.mly"
(
  if  _8 <> "main" || _10 <> "String" then failwith "foo"
  else _3, _15
)
# 524 "parser.ml"
               : 'main_class))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'class_list_rev) in
    Obj.repr(
# 60 "parser.mly"
                           ( List.rev _1 )
# 531 "parser.ml"
               : 'class_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'class_) in
    Obj.repr(
# 64 "parser.mly"
                       ( [ _1 ] )
# 538 "parser.ml"
               : 'class_list_rev))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'class_list_rev) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'class_) in
    Obj.repr(
# 65 "parser.mly"
                        ( _2 :: _1 )
# 546 "parser.ml"
               : 'class_list_rev))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'maybe_extends) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'decl_list) in
    Obj.repr(
# 69 "parser.mly"
                                            ( _2, _3, _5  )
# 555 "parser.ml"
               : 'class_))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                      ( loc "Object" )
# 561 "parser.ml"
               : 'maybe_extends))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 74 "parser.mly"
                      ( _2       )
# 568 "parser.ml"
               : 'maybe_extends))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl_list_rev) in
    Obj.repr(
# 79 "parser.mly"
                ( List.rev _1 )
# 575 "parser.ml"
               : 'decl_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
                     ( [] )
# 581 "parser.ml"
               : 'decl_list_rev))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decl_list_rev) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 84 "parser.mly"
                     ( _2 :: _1 )
# 589 "parser.ml"
               : 'decl_list_rev))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
                     ( Tint )
# 595 "parser.ml"
               : 'type_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
                        ( Tboolean )
# 601 "parser.ml"
               : 'type_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 91 "parser.mly"
                     ( Tclass _1 )
# 608 "parser.ml"
               : 'type_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ident) in
    Obj.repr(
# 95 "parser.mly"
                                                       ( Dfield (_1, _2) )
# 616 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'param_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 96 "parser.mly"
                                ( Dconstr (_1, _3, _5) )
# 625 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'type_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'param_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 97 "parser.mly"
                                         ( Dmeth (_1, _2, _4, _6) )
# 635 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'param_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 98 "parser.mly"
                                    ( Dmeth (Tvoid, _2, _4, _6) )
# 644 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'instr_list) in
    Obj.repr(
# 103 "parser.mly"
                         ( loc (Iblock _2) )
# 651 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    Obj.repr(
# 107 "parser.mly"
                   ( [] )
# 657 "parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_list_rev) in
    Obj.repr(
# 108 "parser.mly"
                    ( List.rev _1 )
# 664 "parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 112 "parser.mly"
                                 ( [(_1, _2)] )
# 672 "parser.ml"
               : 'param_list_rev))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'param_list_rev) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 113 "parser.mly"
                                       ( (_3, _4) :: _1 )
# 681 "parser.ml"
               : 'param_list_rev))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'instr_list_rev) in
    Obj.repr(
# 117 "parser.mly"
                            ( List.rev _1 )
# 688 "parser.ml"
               : 'instr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 121 "parser.mly"
                   ( loc _1 )
# 695 "parser.ml"
               : 'ident))
; (fun __caml_parser_env ->
    Obj.repr(
# 125 "parser.mly"
                     ( [] )
# 701 "parser.ml"
               : 'instr_list_rev))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'instr_list_rev) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'instr) in
    Obj.repr(
# 126 "parser.mly"
                       ( _2 :: _1 )
# 709 "parser.ml"
               : 'instr_list_rev))
; (fun __caml_parser_env ->
    Obj.repr(
# 130 "parser.mly"
                          ( loc (Iblock []) )
# 715 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                          ( loc (Iexpr _1) )
# 722 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'type_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'maybe_init) in
    Obj.repr(
# 132 "parser.mly"
                                               ( loc (Idecl (_1, _2, _3)) )
# 731 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'instr) in
    Obj.repr(
# 133 "parser.mly"
                                              ( loc (Iif (_3, _5, loc (Iblock []))) )
# 739 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'instr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'instr) in
    Obj.repr(
# 134 "parser.mly"
                                               ( loc (Iif (_3, _5, _7)) )
# 748 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'maybe_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'maybe_expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'maybe_expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'instr) in
    Obj.repr(
# 136 "parser.mly"
                                           ( loc (Ifor(_3, _5, _7, _9)) )
# 758 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 137 "parser.mly"
                                               ( _1 )
# 765 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'maybe_expr) in
    Obj.repr(
# 138 "parser.mly"
                                               ( loc (Ireturn _2) )
# 772 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "parser.mly"
                    ( None )
# 778 "parser.ml"
               : 'maybe_init))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 143 "parser.mly"
                       ( Some _2 )
# 785 "parser.ml"
               : 'maybe_init))
; (fun __caml_parser_env ->
    Obj.repr(
# 146 "parser.mly"
                    ( None )
# 791 "parser.ml"
               : 'maybe_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 147 "parser.mly"
                    ( Some _1 )
# 798 "parser.ml"
               : 'maybe_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Int32.t) in
    Obj.repr(
# 151 "parser.mly"
                           ( loc (Econst (Cint _1)) )
# 805 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 152 "parser.mly"
                       ( loc (Econst (Cstring _1)) )
# 812 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 153 "parser.mly"
                       ( loc (Econst (Cbool _1)) )
# 819 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 154 "parser.mly"
                       ( loc (Elval (Lident (loc "this"))) )
# 825 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 155 "parser.mly"
                       ( loc (Econst Cnull) )
# 831 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 156 "parser.mly"
                       ( _2 )
# 838 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lvalue) in
    Obj.repr(
# 158 "parser.mly"
                       ( loc (Elval _1) )
# 845 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 160 "parser.mly"
                       ( loc (Eassign (_1, _3)) )
# 853 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 162 "parser.mly"
                         ( loc (Ecall (_1, _3)) )
# 861 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 163 "parser.mly"
                            ( loc (Enew (_2, _4)) )
# 869 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "parser.mly"
                         ( loc (Eunop (Upre_inc, _2)) )
# 876 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 165 "parser.mly"
                           ( loc (Eunop (Upre_dec, _2)) )
# 883 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 166 "parser.mly"
                        ( loc (Eunop (Upost_inc, _1)) )
# 890 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 167 "parser.mly"
                          ( loc (Eunop (Upost_dec, _1)) )
# 897 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "parser.mly"
                          ( loc (Eunop (Unot, _2)) )
# 904 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 169 "parser.mly"
                            ( loc (Eunop (Uneg, _2)) )
# 911 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 170 "parser.mly"
                          ( loc (Ebinop (_1, Badd, _3)) )
# 919 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "parser.mly"
                           ( loc (Ebinop (_1, Bsub, _3)) )
# 927 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 172 "parser.mly"
                           ( loc (Ebinop (_1, Bmul, _3)) )
# 935 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 173 "parser.mly"
                         ( loc (Ebinop (_1, Bdiv, _3)) )
# 943 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 174 "parser.mly"
                         ( loc (Ebinop (_1, Bmod, _3)) )
# 951 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 175 "parser.mly"
                        ( loc (Ebinop (_1, Bor, _3)) )
# 959 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 176 "parser.mly"
                         ( loc (Ebinop (_1, Band, _3)) )
# 967 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "parser.mly"
                          ( loc (Ebinop (_1, Beq, _3)) )
# 975 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 178 "parser.mly"
                         ( loc (Ebinop (_1, Bneq, _3)) )
# 983 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 179 "parser.mly"
                        ( loc (Ebinop (_1, Blt, _3)) )
# 991 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 180 "parser.mly"
                         ( loc (Ebinop (_1, Blte, _3)) )
# 999 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 181 "parser.mly"
                        ( loc (Ebinop (_1, Bgt, _3)) )
# 1007 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 182 "parser.mly"
                         ( loc (Ebinop (_1, Bgte, _3)) )
# 1015 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 183 "parser.mly"
                                  ( loc (Ecast(Tint, _4)) )
# 1022 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 184 "parser.mly"
                                 ( loc (Ecast(Tboolean, _4)) )
# 1029 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 185 "parser.mly"
                                  (
                         match (_2).node with
                               | Elval (Lident id) -> loc (Ecast(Tclass id.node, _4))
                               | _ -> raise Parsing.Parse_error
)
# 1041 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 190 "parser.mly"
                             ( loc (Einstanceof(_1, _3)) )
# 1049 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 195 "parser.mly"
                ( Lident _1 )
# 1056 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 196 "parser.mly"
                 ( Laccess (_1, _3) )
# 1064 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    Obj.repr(
# 200 "parser.mly"
               ( [] )
# 1070 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list_rev) in
    Obj.repr(
# 201 "parser.mly"
                ( List.rev _1 )
# 1077 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 205 "parser.mly"
                 ( [ _1 ] )
# 1084 "parser.ml"
               : 'expr_list_rev))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_list_rev) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 206 "parser.mly"
                           ( _3 :: _1 )
# 1092 "parser.ml"
               : 'expr_list_rev))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.parsed_prog)
