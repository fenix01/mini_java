# 2 "lexer.mll"
 

  open Lexing
  open Parser
  open Ast
  open Error
  open Format

  let current_pos b =
    lexeme_start_p b,
    lexeme_end_p b

  let id_or_keyword =
    let h = Hashtbl.create 17 in
    List.iter (fun (s,k) -> Hashtbl.add h s k)
      [ "boolean", BOOLEAN;
        "class", CLASS;
        "else", ELSE;
        "extends", EXTENDS;
        "false", BOOL false;
        "for", FOR;
        "if", IF;
        "instanceof", INSTANCEOF;
        "int", INT;
        "new", NEW;
        "null", NULL;
        "public", PUBLIC;
        "return", RETURN;
        "static", STATIC;
        "this", THIS;
        "true", BOOL true;
        "void", VOID;
      ];
    fun s -> try Hashtbl.find h s with Not_found -> IDENT s


  let str_buff = Buffer.create 256

# 41 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\221\255\222\255\002\000\003\000\031\000\002\000\001\000\
    \033\000\235\255\237\255\015\000\051\000\240\255\241\255\242\255\
    \243\255\244\255\245\255\246\255\247\255\248\255\249\255\079\000\
    \089\000\105\000\003\000\255\255\001\000\253\255\252\255\223\255\
    \224\255\225\255\233\255\232\255\226\255\229\255\227\255\138\000\
    \252\255\253\255\254\255\102\000\255\255\226\000\252\255\253\255\
    \254\255\063\001\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\027\000\025\000\024\000\034\000\034\000\
    \021\000\255\255\255\255\017\000\016\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\
    \004\000\019\000\001\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\003\000\255\255\255\255\255\255\255\255\
    \255\255\003\000\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\000\000\028\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\
    \000\000\000\000\000\000\255\255\000\000\046\000\000\000\000\000\
    \000\000\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\026\000\027\000\030\000\026\000\026\000\000\000\000\000\
    \026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \026\000\008\000\022\000\026\000\000\000\009\000\007\000\034\000\
    \021\000\020\000\010\000\011\000\015\000\012\000\013\000\025\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\032\000\014\000\003\000\005\000\004\000\038\000\
    \037\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\017\000\036\000\016\000\033\000\024\000\
    \031\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\019\000\006\000\018\000\035\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\029\000\042\000\044\000\000\000\000\000\
    \028\000\000\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\043\000\000\000\000\000\000\000\
    \024\000\000\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\030\000\050\000\050\000\048\000\050\000\050\000\050\000\
    \050\000\000\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\049\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\050\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\050\000\000\000\000\000\
    \000\000\000\000\000\000\050\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\047\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\028\000\026\000\000\000\255\255\255\255\
    \026\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\026\000\255\255\000\000\000\000\007\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\011\000\000\000\000\000\000\000\000\000\003\000\
    \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\005\000\000\000\008\000\000\000\
    \012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\006\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\025\000\039\000\043\000\255\255\255\255\
    \025\000\255\255\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\039\000\255\255\255\255\255\255\
    \024\000\255\255\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\028\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\255\255\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\049\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\039\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\049\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\049\000\255\255\255\255\
    \255\255\255\255\255\255\049\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\045\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 48 "lexer.mll"
      ( new_line lexbuf; token lexbuf )
# 236 "lexer.ml"

  | 1 ->
# 50 "lexer.mll"
      ( token lexbuf )
# 241 "lexer.ml"

  | 2 ->
# 52 "lexer.mll"
      ( comment lexbuf; token lexbuf )
# 246 "lexer.ml"

  | 3 ->
# 54 "lexer.mll"
      ( Lexing.new_line lexbuf; token lexbuf )
# 251 "lexer.ml"

  | 4 ->
# 56 "lexer.mll"
      ( id_or_keyword (lexeme lexbuf) )
# 256 "lexer.ml"

  | 5 ->
let
# 57 "lexer.mll"
              s
# 262 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 58 "lexer.mll"
      (
	try
	  INTEGER (Int32.of_string s)
	with _ ->
          error (Lexical_error
                   (sprintf "invalid integer constant '%s'" s))
            (current_pos lexbuf)
      )
# 273 "lexer.ml"

  | 6 ->
# 67 "lexer.mll"
      ( Buffer.reset str_buff;
        string lexbuf )
# 279 "lexer.ml"

  | 7 ->
# 70 "lexer.mll"
        ( LP )
# 284 "lexer.ml"

  | 8 ->
# 71 "lexer.mll"
        ( RP )
# 289 "lexer.ml"

  | 9 ->
# 72 "lexer.mll"
        ( LB )
# 294 "lexer.ml"

  | 10 ->
# 73 "lexer.mll"
        ( RB )
# 299 "lexer.ml"

  | 11 ->
# 75 "lexer.mll"
      ( LSB )
# 304 "lexer.ml"

  | 12 ->
# 77 "lexer.mll"
      ( RSB )
# 309 "lexer.ml"

  | 13 ->
# 79 "lexer.mll"
      ( COMMA )
# 314 "lexer.ml"

  | 14 ->
# 81 "lexer.mll"
      ( SEMICOLON )
# 319 "lexer.ml"

  | 15 ->
# 83 "lexer.mll"
      ( DOT )
# 324 "lexer.ml"

  | 16 ->
# 85 "lexer.mll"
      ( MINUS )
# 329 "lexer.ml"

  | 17 ->
# 87 "lexer.mll"
      ( PLUS )
# 334 "lexer.ml"

  | 18 ->
# 89 "lexer.mll"
      ( TIMES )
# 339 "lexer.ml"

  | 19 ->
# 91 "lexer.mll"
      ( DIV )
# 344 "lexer.ml"

  | 20 ->
# 93 "lexer.mll"
      ( MOD )
# 349 "lexer.ml"

  | 21 ->
# 95 "lexer.mll"
      ( BANG )
# 354 "lexer.ml"

  | 22 ->
# 97 "lexer.mll"
      ( AND )
# 359 "lexer.ml"

  | 23 ->
# 99 "lexer.mll"
      ( OR )
# 364 "lexer.ml"

  | 24 ->
# 101 "lexer.mll"
      ( EQ )
# 369 "lexer.ml"

  | 25 ->
# 103 "lexer.mll"
      ( GT )
# 374 "lexer.ml"

  | 26 ->
# 105 "lexer.mll"
      ( GEQ )
# 379 "lexer.ml"

  | 27 ->
# 107 "lexer.mll"
      ( LT )
# 384 "lexer.ml"

  | 28 ->
# 109 "lexer.mll"
      ( LEQ )
# 389 "lexer.ml"

  | 29 ->
# 111 "lexer.mll"
      ( EQEQ )
# 394 "lexer.ml"

  | 30 ->
# 113 "lexer.mll"
      ( NEQ )
# 399 "lexer.ml"

  | 31 ->
# 115 "lexer.mll"
      ( PLUSPLUS )
# 404 "lexer.ml"

  | 32 ->
# 117 "lexer.mll"
      ( MINUSMINUS )
# 409 "lexer.ml"

  | 33 ->
# 119 "lexer.mll"
      ( EOF )
# 414 "lexer.ml"

  | 34 ->
# 121 "lexer.mll"
      ( error (Lexical_error ("illegal character: " ^ lexeme lexbuf))
          (current_pos lexbuf)
      )
# 421 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 39
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 126 "lexer.mll"
         ( () )
# 432 "lexer.ml"

  | 1 ->
# 127 "lexer.mll"
         ( new_line lexbuf; comment lexbuf )
# 437 "lexer.ml"

  | 2 ->
# 128 "lexer.mll"
         ( error (Lexical_error ("unterminated comment"))  (current_pos lexbuf))
# 442 "lexer.ml"

  | 3 ->
# 129 "lexer.mll"
         ( comment lexbuf )
# 447 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and string lexbuf =
    __ocaml_lex_string_rec lexbuf 45
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 132 "lexer.mll"
            s
# 459 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 132 "lexer.mll"
              (
    let c =
      if String.length s = 1 then s.[0] else
        match s.[1] with
        | 'n' -> '\n'
        | 't' -> '\t'
        | '\\' -> '\\'
        | '\"' -> '\"'
        | _ ->
            error
              (Lexical_error ("invalid escape sequence " ^ s))
              (current_pos lexbuf)
    in
    Buffer.add_char str_buff c;
    string lexbuf )
# 477 "lexer.ml"

  | 1 ->
# 147 "lexer.mll"
         ( STRING (Buffer.contents str_buff) )
# 482 "lexer.ml"

  | 2 ->
# 148 "lexer.mll"
         ( error (Lexical_error ("unterminated string"))  (current_pos lexbuf))
# 487 "lexer.ml"

  | 3 ->
let
# 149 "lexer.mll"
         c
# 493 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 149 "lexer.mll"
           ( error (Lexical_error (sprintf "invalid character '%c'" c)) (current_pos lexbuf) )
# 497 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_string_rec lexbuf __ocaml_lex_state

;;

